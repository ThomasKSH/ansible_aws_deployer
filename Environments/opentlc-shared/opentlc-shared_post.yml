######################### env-specific specific

- name: env projects
  hosts: masters
  become: yes
  vars_files:
    - "../{{ config }}_vars.yml"
  tags:
    - env-specific
    - env_specific_projects
  tasks:
    - name: Find current projects list
      command: oc get projects
      register: projects

    # this could go faster if we could figure out a way to pass all items
    # to a script

- name: Create env_specific_shares NFS shares
  hosts: nfs
  become: yes
  vars_files:
    - "../{{ config }}_vars.yml"
  tags:
    - env-specific
    - env-specific_nfs
  tasks:
    - name: Create env-specific nfs directory
      file:
        name: '/srv/nfs/{{ item }}'
        state: directory
        mode: 0777
        owner: nfsnobody
        group: nfsnobody
        recurse: True
      with_items: '{{ env_specific_shares }}'

    - name: Create env-specific exports file
      file:
        path: /etc/exports.d/{{ config }}-{{ guid }}-env-specific.exports
        state: touch
        mode: 0755

    - name: Update env-specific exports file
      lineinfile:
        dest: /etc/exports.d/{{ config }}-{{ guid }}-env-specific.exports
        line: '/srv/nfs/{{ item }} *(rw,root_squash,no_wdelay,sync)'
        state: present
      with_items: '{{ env_specific_shares }}'
      run_once: True

    - name: Reload NFS exports
      shell: "exportfs -r"

- name: env-specific PVs
  hosts: masters
  become: yes
  vars_files:
    - "../{{ config }}_vars.yml"
  tags:
    - env-specific
    - create_env-specific_vol_pvs
  tasks:
    - set_fact:
        pv_size: '10Gi'
        pv_list: "{{ env_specific_shares }}"
        persistentVolumeReclaimPolicy: Retain

    - name: Generate env-specific PV file
      template:
        src: files/{{ config }}_pvs.j2
        dest: /root/env-pvs-{{ config }}-{{ guid }}.yml

    - name: Create env-specific PVs
      shell: 'oc create -f /root/env-pvs-{{ config }}-{{ guid }}.yml || oc update -f /root/env-pvs-{{ config }}-{{ guid }}.yml'

    - name: Create env-specific PVs
      shell: 'oc label pv {{ item }} owner={{ item }}'
      with_items: '{{ env_specific_shares }}'

- name: env-specific infrastructure
  hosts: masters
  become: yes
  vars_files:
    - "../{{ config }}_vars.yml"
    - "../Environments/{{ config }}_secret_vars.yml"
  tags:
    - env-specific
    - env-specific_infra
  tasks:

    - name: Give administrative user cluster-admin privileges
      command: "oc adm policy add-cluster-role-to-user cluster-admin {{ admin_user }}"

    - name: Check for opentlc-shared project
      command: "oc get project opentlc-shared"
      register: result
      ignore_errors: true
    - name: Create opentlc-shared project
      command: "oc adm new-project opentlc-shared --admin {{admin_user}} --node-selector='region=infra'"
      when: result | failed

    - name: Make opentlc-shared project network global
      command: "oc adm pod-network make-projects-global opentlc-shared"

    - name: Set opentlc-shared SCC for anyuid
      command: "oc adm policy add-scc-to-group anyuid system:serviceaccounts:opentlc-shared"

    - name: Add capabilities within anyuid which is not really ideal
      command: "oc patch scc/anyuid --patch '{\"requiredDropCapabilities\":[\"MKNOD\",\"SYS_CHROOT\"]}'"


### Install Nexus
- name: Install Nexus
  hosts: masters
  become: yes
  vars_files:
    - "../{{ config }}_vars.yml"
  roles:
    - nexus2
  tags:
    - env-specific
    - install_nexus

- name: Project Request Template
  hosts: masters
  become: yes
  vars_files:
    - "../{{ config }}_vars.yml"
  tags:
    - env-specific
    - project_request
  tasks:

    - name: Copy project request template to master
      copy:
        src: ../Environments/{{ config }}/project-template.yml
        dest: /root/project-template.yml

    - name: Check for project request template
      command: "oc get template project-request -n default"
      register: request_template
      ignore_errors: true

    - name: Create project request template in default project
      shell: "oc create -f /root/project-template.yml -n default || oc replace -f /root/project-template.yml -n default"
      when: request_template | failed


    - name: Update master config file to use project request template
      lineinfile:
        regexp: "  projectRequestTemplate"
        dest: "/etc/origin/master/master-config.yaml"
        line: '  projectRequestTemplate: "default/project-request"'
        state: present
      register: master_config

    - name: Restart master service
      service:
        name: atomic-openshift-master
        state: restarted
      when: master_config.changed

- name: Cache Docker images
  hosts: nodes
  become: yes
  vars_files:
    - "../{{ config }}_vars.yml"
  tags:
    - env-specific
    - env_specific_images
  tasks:

    - name: 'Pull image'
      command: "docker pull {{ item }}"
      with_items: '{{ env_specific_images }}'
